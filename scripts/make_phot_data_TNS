#!/usr/bin/env python

import scipy as sp
import os
import sys
sys.path.insert(0, os.path.abspath(   os.path.dirname(__file__)) + '/..') 
import argparse
from catalogs.TNS import TNS


def get_inputs(args):
    parser = argparse.ArgumentParser(
        description="Specify Sector, Camera/CCD, and time range, and make a phot.data file for DIA photometry.")
    parser.add_argument('--cam', type=int, nargs="*",  help="Camera Number (1--4)")
    parser.add_argument('--ccd', type=int, nargs="*",   help="CCD Number (1--4)")
    parser.add_argument('--sector', type=int, nargs="*", help="Sector Number (for start/stop time")
    parser.add_argument('--tminus', type=float, default=0.0, help="Early time offset (days): collect all sources discovered this many days before sector start  (default = 0)")
    parser.add_argument('--tplus', type=float, default=0.0, help="Late time offset (days): collect all sources discovered this many days after sector stop (default = 0)")
    parser.add_argument('--mag', type=float, default=20.0, help="Magnitude limit: collect all sources brighter than this value (default = 20)")
    parser.add_argument('--outdir',default='./', help="Output directory stem: phot.data appears in subdirs sectorP/camN_ccdM")
    parser.add_argument('--doall', action='store_true', help="If set, do all cams and CCDs in the sectors")

    return parser.parse_args()


def main():

    args = get_inputs(sys.argv[1:])
    if args.doall:
        cam_use = [1,2,3,4]
        ccd_use = [1,2,3,4]
    else:
        cam_use = args.cam
        ccd_use = args.ccd
    for sector in args.sector:        
        for cam in cam_use:
            for ccd in ccd_use:
                #find the catalog file
                catdir = os.path.join(
                    os.path.abspath( os.path.dirname(__file__)),
                    '../TNS/')
                catfile = 's{s_use:02d}/sector{s_use:d}_cam{cam:d}_transients.txt'.format(
                    s_use = sector,
                    cam   = cam )
                catfile = os.path.join(catdir, catfile)

                #instantiate the catalog object
                cat = TNS(catfile)
                
                
                #select the masks
                time_mask = cat.filter_on_sector_time('s{:d}'.format(sector), 
                                                      early_offset=args.tminus,
                                                      late_offset=args.tplus)
                mag_mask  = cat.mag < args.mag
                ccd_mask  = cat.ccd == ccd

                mask = time_mask & mag_mask & ccd_mask

                #make the file
                outdir = os.path.join(args.outdir,'sector{:02d}'.format(sector),'cam'+str(cam)+'_ccd'+str(ccd))
                if not os.path.isdir(outdir):
                    outdir2 = os.path.join(args.outdir,'s{:04d}'.format(sector),'cam'+str(cam)+'-ccd'+str(ccd))
                    print(outdir2)
                    if not os.path.isdir(outdir2):
                        os.makedirs(outdir)
                    else:
                        outdir = outdir2
                cat.make_phot_data(cat.ccdcol[mask],
                                   cat.ccdrow[mask],
                                   cat.obj_name[mask],
                                   outdir )      


if __name__ == '__main__':
    main()

