#!/usr/bin/env python

import numpy as np
import scipy as sp
import os
import sys
import tqdm
import argparse
import warnings

sys.path.insert(0, os.path.abspath(   os.path.dirname(__file__)) + '/..')
from catalogs.catalog import sector_times
from catalogs.TNS import TNS

def get_inputs(args):
    parser = argparse.ArgumentParser(
        description="Specify Sector, Camera/CCD, and time range, and count up objects in the catalogs.")
    parser.add_argument('--cam', type=int, nargs="*",  help="Camera Number (1--4)")
    parser.add_argument('--ccd', type=int, nargs="*",   help="CCD Number (1--4)")
    parser.add_argument('--sector', type=str, nargs="*", help="Sector Number (for start/stop time")
    parser.add_argument('--tminus', type=float, default=0.0, help="Early time offset (days): collect all sources discovered this many days before sector start  (default = 0)")
    parser.add_argument('--tplus', type=float, default=0.0, help="Late time offset (days): collect all sources discovered this many days after sector stop (default = 0)")
    parser.add_argument('--mag', type=float, default=27.0, help="Magnitude limit: collect all sources brighter than this value (default = 27)")
    parser.add_argument('--doall', action='store_true', help="If set, do all cams and CCDs in the sectors")
    parser.add_argument('--SN', action='store_true', help="If set, only count supernovae")
    parser.add_argument('--list', action='store_true', help="If set, print out the SN names")
    parser.add_argument('--no_buffer', action='store_true', help="If set, ignore buffer around outside of image (objects in this region are not safe for photometry)")

    parser.add_argument('--save', action='store_true', help="If set, save in ascii columns for plotting in the TESS fields")
    parser.add_argument('--quiet', action='store_true', help='do not print anything intermediate, can be used while saving')
    parser.add_argument('--nowarn', action='store_true', help='suppress warnings')
    return parser.parse_args()


def main():

    args = get_inputs(sys.argv[1:])

   
    if args.sector[0] == 'doall':
        sector_use = [ int(s.replace('s','')) for s in sector_times.keys() ]
        print(f"Counting transients in all sectors, 1 through { max(sector_use) }")
    else:
        sector_use = [ int(s) for s in args.sector]
        
    if args.doall:
        cam_use = [1,2,3,4]
        ccd_use = [1,2,3,4]
    else:
        cam_use = args.cam
        ccd_use = args.ccd

    if args.nowarn:
        warnings.filterwarnings("ignore")
        
    total = 0

    if args.save:
        outfile = open(f'count_transients_s{min(sector_use)}-{max(sector_use)}.txt','w')
        outfile.write('#{:>3s} {:>12s} '
                      '{:>15s} {:>6s} '
                      '{:>10s} {:>2s} '
                      '{:>14s} {:>10s} '
                      '{:>13s} {:>4s} {:>4s} '
                      '{:>15s} {:>15.3s}\n'.format(
                          'sector','ra','dec',
                          'mag','disc_tjd',
                          't1','type',
                          'name',
                          'group','cam','ccd',
                          'column','row'))

        
    sector_iterator = tqdm.tqdm(sector_use) if args.quiet else sector_use

    for sector in sector_iterator:        
        sector_total = 0
        for cam in cam_use:
            cam_total = 0
            for ccd in ccd_use:
                #find the catalog file                
                catdir = os.path.join(
                    os.path.abspath( os.path.dirname(__file__)),
                    '../TNS/')
                catfile = f's{sector:02d}/sector{sector:d}_cam{cam:d}_transients.txt'
 
                catfile = os.path.join(catdir, catfile)

                if not os.path.isfile(catfile):
                    continue


                #instantiate the catalog object
                try:
                    cat = TNS(catfile, ignore_image_buffer = args.no_buffer)
                except Exception as e:
                    print(sector, cam, e)
                    continue

                #select the masks
                time_mask = cat.filter_on_sector_time(f's{sector}', 
                                                      early_offset=args.tminus,
                                                      late_offset=args.tplus)
                mag_mask  = cat.mag < args.mag
                ccd_mask  = cat.ccd == ccd

                
                mask = time_mask & mag_mask & ccd_mask
                if args.SN:
                    mask_SN = cat.prefix == 'SN'
                    mask = mask & mask_SN
                if args.list or not args.quiet:
                    print(f'{sector: 8d} {cam: 8d} {ccd: 8} {len(cat.obj_name[mask]): 8d}')
                if args.list:
                    for jj in np.where(mask)[0]:
                        print(f'{cat.prefix[jj]}{cat.obj_name[jj]} {cat.obj_type[jj]:6s} {cat.internal_name[jj]} {cat.mag[jj]}')
                        #print('{:4d} {:4d} {:4d} {}{} {:6s} {} {}'.format(sector, cam, ccd, cat.prefix[jj],
#                                                        cat.obj_name[jj],
#                                                        cat.obj_type[jj],
#                                                        cat.internal_name[jj], cat.mag[jj]))

                if args.save:
                    
                    for jj in np.where(mask)[0]:
                        outfile.write(f'{sector:4d} {cat.ra[jj]:15.8f} '
                                      f'{cat.dec[jj]:15.8f} {cat.mag[jj]:6.3f} '
                                      f'{cat.tjd[jj]:10.5f} {cat.prefix[jj]:4s} '
                                      f'{cat.obj_type[jj]:14s} {cat.obj_name[jj]:10s} '
                                      f'{cat.group[jj]:11s} {cam:4d} {ccd:4d} '
                                      f'{cat.ccdcol[jj]:15.3f} {cat.ccdrow[jj]:15.3f}\n')
                cam_total += len(cat.obj_name[mask])
            if args.list or not args.quiet:
                print('{:>8s} {:>8s} {:>8s} {:>8s}'.format('sector', 'cam', 'ccd', 'N'))
                print(f'cam_total:                 {cam_total: 8d}')
            sector_total += cam_total
        if args.list or not args.quiet:
            print(f'sector_total:              {sector_total: 8d}')
        total += sector_total
    print(f'total:                     {total: 8d}')
    if args.save:
        outfile.close()
            
if __name__ == '__main__':
    main()

