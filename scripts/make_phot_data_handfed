#!/usr/bin/env python

import numpy as np
import scipy as sp
import os
import sys
sys.path.insert(0, os.path.abspath(   os.path.dirname(__file__)) + '/..') 
import argparse
from catalogs.AsciiCol import AsciiCol


def get_inputs(args):
    parser = argparse.ArgumentParser(
        description="Specify Sector, Camera/CCD, and time range, and make a phot.data file for DIA photometry.")
    parser.add_argument('--infile', type=str, help="Input catalog file.  Assumes 4 columns:  name, ra, dec, mag")
    parser.add_argument('--cam', type=int, nargs="*",  help="Camera Number (1--4)")
    parser.add_argument('--ccd', type=int, nargs="*",   help="CCD Number (1--4)")
    parser.add_argument('--sector', type=int, nargs="*", help="Sector Number (for start/stop time")
    parser.add_argument('--outdir',default='./', help="Output directory stem: phot.data appears in subdirs sectorP/camN_ccdM")
    parser.add_argument('--doall', action='store_true', help="If set, do all cams and CCDs in the sectors")
    parser.add_argument('--decimal', action='store_true',help="If set, assumes the catalog coordinates are in decimal")
    parser.add_argument('--no_buffer',action='store_true',help="If set, ignore 8 pixel buffer aroudn imaging region")

    return parser.parse_args()


def main():

    args = get_inputs(sys.argv[1:])
    if args.doall:
        cam_use = [1,2,3,4]
        ccd_use = [1,2,3,4]
    else:
        cam_use = args.cam
        ccd_use = args.ccd
    for sector in args.sector:        
        for cam in cam_use:
            for ccd in ccd_use:
                #instantiate the catalog object
                try:
                    if args.decimal:
                        cat = AsciiCol(args.infile, sector, cam, sexagesimal=False, 
                                       ignore_image_buffer = args.no_buffer)
                    else:
                        cat = AsciiCol(args.infile, sector, cam, sexagesimal=True,
                                       ignore_image_buffer = args.no_buffer)
                except Exception as e:
                    print(e)
                    print('not on this ccd')
                    #raise
                    continue
                mask  = cat.ccd == ccd

                #make the file
                outdir = os.path.join(args.outdir,'sector{:02d}'.format(sector),'cam'+str(cam)+'_ccd'+str(ccd))
                if not os.path.isdir(outdir):
                    os.makedirs(outdir)
                cat.make_phot_data(cat.ccdcol[mask],
                                   cat.ccdrow[mask],
                                   cat.obj_name[mask],
                                   outdir )      


if __name__ == '__main__':
    main()

